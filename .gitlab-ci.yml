variables:
  GOOS: linux
  GOARCH: amd64
  CGO_ENABLED: 0
  UPX_URL: https://github.com/upx/upx/releases/download/v3.96/upx-3.96-amd64_linux.tar.xz
  DEBIAN_FRONTEND: noninteractive
  POSTGRES_DB: postgres
  POSTGRES_USER: postgres
  POSTGRES_PASSWORD: postgres
  POSTGRES_HOST_AUTH_METHOD: trust

services:
  - postgres:9.5

stages:
  - test
  - build
  - release
  - deploy

unit-testing:
  image: golang:1.16-buster
  stage: test
  coverage: /^total:[^\d]+(\d+.\d+)\%/
  variables:
    GOCACHE: "/go/go-build"
    CI_DB_HOST: postgres
    CI_DB_USER: postgres
    CI_DB_PASS: postgres
    CI_DB_NAME: postgres
    CI_DB_PORT: 5432
    CI_FORCE_USE_POSTGRES: 1
  script:
    - echo "Validating routes..."
    - touch router-logs.txt
    - |
      find app/controller/ \
      -maxdepth 1 \
      -mindepth 1 \
      -type d \
      -exec sh -c 'cat app/routes/router.go | grep "api/{}" || echo "{}: controller defined but router not registered" >> router-logs.txt' \;
    - UNIQUE_MIGRATIONS="`cat ./app/migrations/migration.go | grep 'model\.' | sort | uniq -d`" ; if [ ! -z "$UNIQUE_MIGRATIONS" ]; then echo "$UNIQUE_MIGRATIONS" && echo "Duplicate Migrations" && exit 2; fi
    - if [ "`cat router-logs.txt | wc -w`" != "0" ]; then cat router-logs.txt && exit 2; fi
    - CGO_ENABLED=1 go test -v -p 2 -tags "integration sqlite" -cover -coverprofile cover.txt ./...
    - go tool cover -func cover.txt
  only:
    changes:
      - app/*
      - app/**/*
      - docs/*
      - .gitlab-ci.yml
      - kubernetes-deploy.yml
      - kubernetes-deploy-dev.yml
      - kubernetes-deploy-prod.yml
      - Dockerfile
      - "*.go"
      - go.*
  when: on_success
  artifacts:
    expire_in: 24 hours
    name: "$CI_JOB_STAGE-$CI_COMMIT_REF_NAME"
    paths:
      - cover.txt

cleancode:
  image: golang:1.16-buster
  stage: test
  coverage: /^Grade:\s*[A-Z]\+?\s*\((\d+.\d+)\%\)/
  script:
    - |
      if [ ! -f "$GOPATH/bin/goreportcard-cli" ]; then \
      go install github.com/gordonklaus/ineffassign@latest && \
      go install github.com/client9/misspell/cmd/misspell@latest && \
      go install github.com/fzipp/gocyclo/cmd/gocyclo@latest && \
      go install golang.org/x/lint/golint@latest && \
      go install github.com/gojp/goreportcard/cmd/goreportcard-cli@latest && \
      curl -sSL "$GO_METALINTER_URL" -o gometalinter.tar.gz && \
      tar -xzvpf gometalinter.tar.gz --strip-components=1 -C "$GOPATH/bin" && \
      rm gometalinter.tar.gz ; \
      fi
    - goreportcard-cli -v 2>/dev/null
  only:
    changes:
      - app/*
      - app/**/*
      - docs/*
      - .gitlab-ci.yml
      - kubernetes-deploy.yml
      - kubernetes-deploy-dev.yml
      - kubernetes-deploy-prod.yml
      - Dockerfile
      - "*.go"
      - go.*
  needs: ["unit-testing"]
  when: on_success

docs:
  image: golang:1.16-buster
  stage: test
  coverage: /^total:[^\d]+(\d+.\d+)\%/
  variables:
    FAIL_ON_CONTROLLER: $FAIL_ON_CONTROLLER_TEST
  script:
    - |
      if [ "$FAIL_ON_CONTROLLER" = "1" ] && [ "$CI_COMMIT_BRANCH" != "master" ]; then \
      go test -timeout 30s -v -tags sqlite -run ^TestController$ api/app/controller ; \
      fi
    - |
      if [ ! -f "$GOPATH/bin/swag" ]; then \
      go install github.com/swaggo/swag/cmd/swag@latest; \
      fi
    - swag init
    - swag init 2>/dev/null | grep -E 'warning:|Skipping' > docs.txt || echo
    - |
      if [ "$CI_COMMIT_BRANCH" != "master" ]; then
      SWAGGER_ERRORS="`cat docs.txt`" ; \
        if [ ! -z "$SWAGGER_ERRORS" ]; then \
          echo "$SWAGGER_ERRORS" ; \
          echo "Invalid swagger documentation"; \
          exit 2;
        fi
      fi
  only:
    changes:
      - app/*
      - app/**/*
      - docs/*
      - .gitlab-ci.yml
      - kubernetes-deploy.yml
      - kubernetes-deploy-dev.yml
      - kubernetes-deploy-prod.yml
      - Dockerfile
      - "*.go"
      - go.*
  needs: ["unit-testing", "cleancode"]
  when: on_success

build:
  image: golang:1.16-buster
  stage: build
  script:
    - |
      if [ ! -f "$GOPATH/bin/upx" ]; then \
      apt update && apt install -y --no-install-recommends xz-utils && \
      go get -v github.com/pwaller/goupx && \
      curl -ksSL $UPX_URL -o /tmp/upx.tar.xz && \
      mkdir -p $GOPATH/src/upx && \
      tar -xJvpf /tmp/upx.tar.xz --strip-components=1 -C $GOPATH/src/upx && \
      ln -s $GOPATH/src/upx/upx $GOPATH/bin/upx; \
      fi
    - rm -rf docs/*.go
    - sed -i "s/v1.0.0/v1.0.0-$(date +%Y%m%d%H%M%S)/" app/controller/api_info_get.go
    - go get -d -v
    - go build -a -tags "netgo production" -ldflags '-s -w -extldflags "-static"' -o app.run .
    - goupx app.run
    - if [ -f /etc/ssl/certs/ca-certificates.crt ] ; then cp /etc/ssl/certs/ca-certificates.crt . ; fi
    - if [ -f /etc/nsswitch.conf ] ; then cp /etc/nsswitch.conf . ; fi
  artifacts:
    expire_in: 15 minutes
    name: "$CI_JOB_STAGE-$CI_COMMIT_REF_NAME"
    paths:
      - app.run
      - ca-certificates.crt
      - nsswitch.conf
  only:
    refs:
      - master
    changes:
      - app/*
      - app/**/*
      - docs/*
      - .gitlab-ci.yml
      - kubernetes-deploy.yml
      - kubernetes-deploy-dev.yml
      - kubernetes-deploy-prod.yml
      - Dockerfile
      - "*.go"
      - go.*
  needs: ["unit-testing", "cleancode", "docs"]
  when: on_success

report:
  image: registry.tog.co.id/burhantog/git-quick-stats:latest
  stage: build
  script:
    - git clone $CI_REPOSITORY_URL /tmp/clone
    - cd /tmp/clone && stats.py
    - mv *.svg $CI_PROJECT_DIR/
  artifacts:
    expire_in: 7 days
    name: "$CI_JOB_STAGE-$CI_COMMIT_REF_NAME"
    paths:
      - "*.svg"
  only:
    refs:
      - master
    changes:
      - app/*
      - app/**/*
      - docs/*
      - .gitlab-ci.yml
      - kubernetes-deploy.yml
      - kubernetes-deploy-dev.yml
      - kubernetes-deploy-prod.yml
      - Dockerfile
      - "*.go"
      - go.*
  needs: ["build"]
  when: on_success

release:
  stage: "release"
  image:
    name: gcr.io/kaniko-project/executor:debug
    entrypoint: [""]
  script:
    - echo "{\"auths\":{\"$CI_REGISTRY\":{\"username\":\"$CI_REGISTRY_USER\",\"password\":\"$CI_REGISTRY_PASSWORD\"}}}" > /kaniko/.docker/config.json
    - /kaniko/executor --context $CI_PROJECT_DIR --dockerfile $CI_PROJECT_DIR/Dockerfile --destination $CI_REGISTRY_IMAGE:latest
  needs: ["build"]
  only:
    refs:
      - master
    changes:
      - app/*
      - app/**/*
      - docs/*
      - .gitlab-ci.yml
      - kubernetes-deploy.yml
      - kubernetes-deploy-dev.yml
      - kubernetes-deploy-prod.yml
      - Dockerfile
      - "*.go"
      - go.*
  when: on_success

deploy_testing:
  stage: "deploy"
  image: 
    name: bitnami/kubectl:latest
    entrypoint: [""]
  script:
    - sed -i "s/{API_VERSION}/$(date +%Y%m%d%H%M%S)/g" kubernetes-deploy-dev.yml
    - sed -i "s/{DB_HOST}/${DB_HOST}/g" kubernetes-deploy-dev.yml
    - sed -i "s/{SECRET}/${DOCKER_SECRET}/g" kubernetes-deploy-dev.yml
    - kubectl --kubeconfig="$K8S_DO_SECRET" apply -f kubernetes-deploy-dev.yml
  needs: ["release"]
  only:
    refs:
      - master
    changes:
      - app/*
      - app/**/*
      - docs/*
      - .gitlab-ci.yml
      - kubernetes-deploy.yml
      - kubernetes-deploy-dev.yml
      - kubernetes-deploy-prod.yml
      - docs/*
      - Dockerfile
      - "*.go"
      - go.*
  when: on_success

deploy_staging:
  stage: "deploy"
  image: 
    name: bitnami/kubectl:latest
    entrypoint: [""]
  script:
    - sed -i "s/{API_VERSION}/$(date +%Y%m%d%H%M%S)/g" kubernetes-deploy.yml
    - sed -i "s/{DB_HOST}/${DB_HOST}/g" kubernetes-deploy.yml
    - sed -i "s/{SECRET}/${DOCKER_SECRET}/g" kubernetes-deploy.yml
    - kubectl --kubeconfig="$K8S_DO_SECRET" apply -f kubernetes-deploy.yml
  needs: ["release"]
  only:
    refs:
      - master
    changes:
      - app/*
      - app/**/*
      - docs/*
      - .gitlab-ci.yml
      - kubernetes-deploy.yml
      - kubernetes-deploy-dev.yml
      - kubernetes-deploy-prod.yml
      - docs/*
      - Dockerfile
      - "*.go"
      - go.*
  when: manual

deploy_production:
  stage: "deploy"
  image: 
    name: bitnami/kubectl:latest
    entrypoint: [""]
  script:
    - sed -i "s/{API_VERSION}/$(date +%Y%m%d%H%M%S)/g" kubernetes-deploy-prod.yml
    - sed -i "s/{DB_HOST}/${DB_HOST}/g" kubernetes-deploy-prod.yml
    - sed -i "s/{SECRET}/${DOCKER_SECRET}/g" kubernetes-deploy-prod.yml
    - kubectl --kubeconfig="$K8S_DO_SECRET" apply -f kubernetes-deploy-prod.yml
  needs: ["release"]
  only:
    refs:
      - master
    changes:
      - app/*
      - app/**/*
      - docs/*
      - .gitlab-ci.yml
      - kubernetes-deploy.yml
      - kubernetes-deploy-dev.yml
      - kubernetes-deploy-prod.yml
      - docs/*
      - Dockerfile
      - "*.go"
      - go.*
  when: manual

